# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FastDownloader.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from pytube import YouTube

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(372, 271)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/IMG-MainIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setStyleSheet("background-color: rgb(44, 62, 80);")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)

        self.groupBox.setGeometry(QtCore.QRect(10, 10, 351, 231))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")

        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)

        self.LblUrl = QtWidgets.QLabel(self.groupBox)
        self.LblUrl.setGeometry(QtCore.QRect(90, 10, 161, 31))        
        self.LblUrl.setFont(font)
        self.LblUrl.setStyleSheet("color: rgb(234, 236, 238);")
        self.LblUrl.setAlignment(QtCore.Qt.AlignCenter)
        self.LblUrl.setObjectName("LblUrl")

        self.txtLink = QtWidgets.QLineEdit(self.groupBox)
        self.txtLink.setGeometry(QtCore.QRect(40, 60, 261, 20))
        self.txtLink.setStyleSheet("QLineEdit#txtLink{\n"
        "border: 1px solid rgb(41, 128, 185);\n"
        "color: rgb(234, 236, 238);\n"
        "font:bold;\n"
        "}")
        self.txtLink.setObjectName("txtLink")

        self.BtnDownload = QtWidgets.QPushButton(self.groupBox)
        self.BtnDownload.setGeometry(QtCore.QRect(200, 120, 101, 51))
        self.BtnDownload.setStyleSheet("QPushButton#BtnDownload{\n"
        "border: 1px solid black;color: rgb(234, 236, 238);font: bold 14px;\n"
        "background: rgb(40, 116, 166);\n"
        "}\n"
        "QPushButton#BtnDownload:hover\n"
        "{background: rgb(33, 97, 140);}\n"
        "\n"
        "QPushButton#BtnDownload:pressed{\n"
        "background: rgb(27, 79, 114);\n"
        "}")
        self.BtnDownload.setObjectName("BtnDownload")
        self.BtnDownload.clicked.connect(self.DownloadFile)

        self.RdbAudio = QtWidgets.QRadioButton(self.groupBox)
        self.RdbAudio.setGeometry(QtCore.QRect(40, 120, 61, 17))
        self.RdbAudio.setStyleSheet("QRadioButton{color: rgb(234, 236, 238);font: bold 12px;}\n"
        "QRadioButton#RdbAudio:hover{color: rgb(40, 116, 166);}")
        self.RdbAudio.setObjectName("RdbAudio")

        self.RdbVideo = QtWidgets.QRadioButton(self.groupBox)
        self.RdbVideo.setGeometry(QtCore.QRect(40, 150, 61, 17))
        self.RdbVideo.setStyleSheet("QRadioButton{color: rgb(234, 236, 238);font: bold 12px;}\n"
        "QRadioButton#RdbVideo:hover{color: rgb(231, 76, 60);}")
        self.RdbVideo.setObjectName("RdbVideo")
        
        self.ProgressBar = QtWidgets.QProgressBar(self.groupBox)
        self.ProgressBar.setGeometry(QtCore.QRect(60, 190, 221, 23))
        self.ProgressBar.setProperty("value",0)
        self.ProgressBar.setStyleSheet("QProgressBar {border: 1px solid rgb(41, 128, 185);\n"
        "border-radius: 5px;text-align: center;color:rgb(234, 236, 238);}\n"
        "QProgressBar::chunk {background-color: #2471A3 ;width: 10px;}")
        self.ProgressBar.setObjectName("ProgressBar")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 372, 18))
        self.menubar.setStyleSheet("QMenu {background-color: rgb(44, 62, 80);\n"
        "margin: 2px;color:rgb(234, 236, 238);}\n"
        "QMenu::item {padding: 2px 25px 2px 20px;\n"
        "border: 1px solid transparent; /* reserve space for selection border */\n"
        "border-radius: 4px;}\n"
        "\n"
        "QMenu::item:selected {border-color: darkblue;background: rgba(27, 79, 114, 150);}\n"
        "\n"
        "QMenuBar {background-color: rgb(44, 62, 80);spacing: 3px;color: rgb(234, 236, 238);}\n"
        "\n"
        "QMenuBar::item {padding: 1px 4px;background: transparent;border-radius: 4px;}\n"
        "\n"
        "QMenuBar::item:selected {background: rgb(40, 116, 166);\n"
        "}")
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)

        self.actionDownloadList = QtWidgets.QAction(MainWindow)
        self.actionDownloadList.setObjectName("actionDownloadList")

        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")

        self.menuFile.addAction(self.actionDownloadList)
        self.menuSettings.addAction(self.actionPreferences)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Hide ProgressBar
        self.ProgressBar.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fast  Downloader"))
        self.LblUrl.setText(_translate("MainWindow", "URL Video"))
        self.BtnDownload.setText(_translate("MainWindow", "Download"))
        self.RdbAudio.setText(_translate("MainWindow", "Audio"))
        self.RdbVideo.setText(_translate("MainWindow", "Video"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionDownloadList.setText(_translate("MainWindow", "Download Video List"))
        self.actionPreferences.setText(_translate("MainWindow", "Preferences..."))

    def DownloadFile(self):
        if(self.RdbAudio.isChecked()):
            self.ProgressBar.show()
            threading.Thread(target=self.DownloadAudio).start()
        if(self.RdbVideo.isChecked()):
            self.ProgressBar.show()
            threading.Thread(target=self.DownloadVideo).start()
    
    def DownloadAudio(self):
        #Get Link from LineEdit
        self.yt = YouTube(self.txtLink.text(),on_progress_callback=self.show_progress_bar)
        #Filter by Audio
        self.audioType = self.yt.streams.filter(only_audio=True).first()
        #Get Size of File
        self.MaxfileSize = self.audioType.filesize
        #Filter and Download Video
        self.audioType.download()
        #Reset items
        self.Reset()
        #Set value 0
        self.ProgressBar.setProperty("value",0)


    def DownloadVideo(self):
        #Get Link from LineEdit
        self.yt = YouTube(self.txtLink.text(),on_progress_callback=self.show_progress_bar)
        #Filter Video File
        self.videoType = self.yt.streams.get_highest_resolution()
        #Get Size of File
        self.MaxfileSize = self.videoType.filesize
        #Download Video
        self.videoType.download()
        #Reset items
        self.Reset()
        #Set Value 0
        self.ProgressBar.setProperty("value",0)


    def show_progress_bar(self, stream=None, chunk=None, bytes_remaining=None):

       # loadingPercent label configure value %
       percentCount = float("%0.2f"% (100 - (100*(bytes_remaining/self.MaxfileSize))))

       if(percentCount <= 100):
           self.ProgressBar.setProperty("value",percentCount)

    def Reset(self):
        self.txtLink.clear()
        self.ProgressBar.hide()
        self.MaxfileSize = 0

if __name__ == "__main__":
  
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()

    ui.setupUi(MainWindow)

    MainWindow.show()

    sys.exit(app.exec_())
